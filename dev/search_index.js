var documenterSearchIndex = {"docs":
[{"location":"time/#Time","page":"Time","title":"Time","text":"","category":"section"},{"location":"time/","page":"Time","title":"Time","text":"Utilities for dealing with time, including local/prime sidereal time, and converting between them.","category":"page"},{"location":"time/","page":"Time","title":"Time","text":"time_to_decimal\ndecimal_to_time\nlocal_to_universal_time\nsolar_to_prime_sidereal_time\nprime_to_local_sidereal_time\nlocal_civilian_to_sidereal_time","category":"page"},{"location":"time/#CelestialCalc.time_to_decimal","page":"Time","title":"CelestialCalc.time_to_decimal","text":"time_to_decimal(time::Time)\n\nConvert Time to a decimal.\n\n\n\n\n\n","category":"function"},{"location":"time/#CelestialCalc.decimal_to_time","page":"Time","title":"CelestialCalc.decimal_to_time","text":"decimal_to_time(decimal::Real)\n\nConvert a decimal value to a Time object.\n\n\n\n\n\n","category":"function"},{"location":"time/#CelestialCalc.local_to_universal_time","page":"Time","title":"CelestialCalc.local_to_universal_time","text":"local_to_universal_time(zdt::ZonedDateTime) -> ZonedDateTime\n\nConvert a ZonedDateTime in any timezone to the UTC timezone.\n\n\n\n\n\n","category":"function"},{"location":"time/#CelestialCalc.solar_to_prime_sidereal_time","page":"Time","title":"CelestialCalc.solar_to_prime_sidereal_time","text":"solar_to_prime_sidereal_time(zdt::ZonedDateTime) -> Real\n\nConvert a ZonedDateTime to its equivalent GMST (Greenwich Mean Sidereal Time).\n\n\n\n\n\n","category":"function"},{"location":"time/#CelestialCalc.prime_to_local_sidereal_time","page":"Time","title":"CelestialCalc.prime_to_local_sidereal_time","text":"prime_to_local_sidereal_time(prime_sidereal_time::Float64, longitude::Float64) -> Float64\n\nFind an observer's local sidereal time by adjusting prime sidereal time to its longitude.\n\n\n\n\n\n","category":"function"},{"location":"time/#CelestialCalc.local_civilian_to_sidereal_time","page":"Time","title":"CelestialCalc.local_civilian_to_sidereal_time","text":"local_civilian_to_sidereal_time(lct::ZonedDateTime, longitude::Float64) -> Float64\n\nConvert an observer's local civilian date and time (as a ZonedDateTime) to its corresponding local sidereal time (in decimal format).\n\n\n\n\n\n","category":"function"},{"location":"coordinate_systems/#Coordinate-Systems","page":"Coordinate Systems","title":"Coordinate Systems","text":"","category":"section"},{"location":"coordinate_systems/","page":"Coordinate Systems","title":"Coordinate Systems","text":"Types for the positional representation of observers and sky objects, and functions for converting between them.","category":"page"},{"location":"coordinate_systems/","page":"Coordinate Systems","title":"Coordinate Systems","text":"LatLng\nEquatorialCoordinates\nHorizonCoordinates\nequatorial_to_horizon","category":"page"},{"location":"coordinate_systems/#CelestialCalc.LatLng","page":"Coordinate Systems","title":"CelestialCalc.LatLng","text":"LatLng\n\nCoordinate system for locating a point in Earth's surface.\n\n\n\n\n\n","category":"type"},{"location":"coordinate_systems/#CelestialCalc.EquatorialCoordinates","page":"Coordinate Systems","title":"CelestialCalc.EquatorialCoordinates","text":"EquatorialCoordinates\n\nCoordinate system for locating a point in the celestial sphere, given fixed points of reference (the celestial equator and the First Point of Aries). Here, α is right-ascention and δ is declination.\n\n\n\n\n\n","category":"type"},{"location":"coordinate_systems/#CelestialCalc.HorizonCoordinates","page":"Coordinate Systems","title":"CelestialCalc.HorizonCoordinates","text":"HorizonCoordinates\n\nCoordinate system for locating a point in an observer's local celestial sphere, which varies with time. Here, h is altitude and Az is azimuth.\n\n\n\n\n\n","category":"type"},{"location":"coordinate_systems/#CelestialCalc.equatorial_to_horizon","page":"Coordinate Systems","title":"CelestialCalc.equatorial_to_horizon","text":"equatorial_to_horizon(δ::Float64, hour_angle::Time, latitude::Float64) -> HorizonCoordinates\n\nFind the HorizonCoordinates for an object, given its declination (δ) and hour angle (H) represented as a Time object, as well as the observer's latitude.\n\n\n\n\n\nequatorial_to_horizon(δ::Float64, hour_angle::Float64, latitude::Float64) -> HorizonCoordinates\n\nFind the HorizonCoordinates for an object, given its declination (δ) and hour angle (H) represented in decimal format, as well as the observer's latitude.\n\n\n\n\n\nequatorial_to_horizon(eqcoord::EquatorialCoordinates, local_civilian_date::ZonedDateTime, latlong::LatLng) -> HorizonCoordinates\n\nFind the HorizonCoordinates for an object, given its EquatorialCoordinates and the observer's local civilizan time and position.\n\n\n\n\n\n","category":"function"},{"location":"angles/#Angles","page":"Angles","title":"Angles","text":"","category":"section"},{"location":"angles/","page":"Angles","title":"Angles","text":"Type for easily working with angles in DMS format and converting to/from decimal.","category":"page"},{"location":"angles/","page":"Angles","title":"Angles","text":"Angle\nAngle(d, isneg::Bool=false)\nAngle(d, m, isneg::Bool=false)\nAngle(d, m, s::Real)\nangle_to_decimal(angle::Angle)\ndecimal_to_angle(decimal::Real)","category":"page"},{"location":"angles/#CelestialCalc.Angle","page":"Angles","title":"CelestialCalc.Angle","text":"Angle\n\nRepresents an angle with degrees, minutes and seconds. The isnegative flag is used instead of allowing degrees to be negative for better dealing with negative angles smaller than 1 (example: -0°10'10''). For convenience, the constructors accept negative degrees, but the final object always has positive degrees and sets the isnegative as needed.\n\nExamples\n\njulia> Angle(10,5,30)\n10°05'30.00''\n\njulia> Angle(45,15,2,true)\n-45°15'02.00''\n\njulia> Angle(-45,15,2)\n-45°15'02.00''\n\njulia> Angle(270,55,2.1)\n270°55'02.10''\n\n\n\n\n\n","category":"type"},{"location":"angles/#CelestialCalc.Angle-2","page":"Angles","title":"CelestialCalc.Angle","text":"Angle(d, isneg::Bool=false) -> Angle\n\nConstruct an angle with whole degrees.\n\nExamples\n\njulia> Angle(10)\n10°00'00.00''\n\njulia> Angle(45,true)\n-45°00'00.00''\n\n\n\n\n\n","category":"type"},{"location":"angles/#CelestialCalc.Angle-3","page":"Angles","title":"CelestialCalc.Angle","text":"Angle(d, m, isneg::Bool=false) -> Angle\n\nConstruct an angle with whole degrees and minutes.\n\nExamples\n\njulia> Angle(10,5)\n10°05'00.00''\n\njulia> Angle(45,15,true)\n-45°15'00.00''\n\n\n\n\n\n","category":"type"},{"location":"angles/#CelestialCalc.Angle-Tuple{Any, Any, Real}","page":"Angles","title":"CelestialCalc.Angle","text":"Angle(d, m, s::Real) -> Angle\n\nShorthand for the construction of positive angles.\n\nExamples\n\njulia> Angle(10,5,30)\n10°05'30.00''\n\njulia> Angle(45,15,2.1)\n45°15'02.10''\n\n\n\n\n\n","category":"method"},{"location":"angles/#CelestialCalc.angle_to_decimal-Tuple{Angle}","page":"Angles","title":"CelestialCalc.angle_to_decimal","text":"angle_to_decimal(angle::Angle)\n\nConvert Angle in DMS format to a decimal.\n\n\n\n\n\n","category":"method"},{"location":"angles/#CelestialCalc.decimal_to_angle-Tuple{Real}","page":"Angles","title":"CelestialCalc.decimal_to_angle","text":"decimal_to_angle(decimal::Real)\n\nConvert a decimal value to an Angle in DMS format.\n\n\n\n\n\n","category":"method"},{"location":"data/#Data","page":"Data","title":"Data","text":"","category":"section"},{"location":"data/","page":"Data","title":"Data","text":"Types and utilities for reading astronomical data.","category":"page"},{"location":"data/","page":"Data","title":"Data","text":"Star\nbrightstars_catalog","category":"page"},{"location":"data/#CelestialCalc.Star","page":"Data","title":"CelestialCalc.Star","text":"Star\n\nRepresent a star object and its data (coordinate and magnitude).\n\n\n\n\n\n","category":"type"},{"location":"data/#CelestialCalc.brightstars_catalog","page":"Data","title":"CelestialCalc.brightstars_catalog","text":"brightstars_catalog\n\nLoads the Bright Stars catalog in JSON format as a list of Star with EquatorialCoordinates.\n\n\n\n\n\n","category":"function"},{"location":"plotting/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Utilities for plotting star maps.","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"cartesian_projection\nstereographic_projection","category":"page"},{"location":"plotting/#CelestialCalc.cartesian_projection","page":"Plotting","title":"CelestialCalc.cartesian_projection","text":"cartesian_projection(hcoords::HorizonCoordinates) -> [Float64,Float64,Float64]\n\nProject HorizonCoordinates to the Cartesian coordinate system.\n\n\n\n\n\n","category":"function"},{"location":"plotting/#CelestialCalc.stereographic_projection","page":"Plotting","title":"CelestialCalc.stereographic_projection","text":"cartesian_projection(hcoords::HorizonCoordinates) -> [Float64,Float64,Float64]\n\nProject HorizonCoordinates to the 2-dimensional Cartesian coordinate system using the stereographic projection.\n\n\n\n\n\n","category":"function"},{"location":"#CelestialCalc.jl","page":"Home","title":"CelestialCalc.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package that implements positional astronomy tools as described in the book Celestial Calculations by J. L. Lawrence.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CelestialCalc was created for (self-)educational purposes and its main goal is teaching myself positional astronomy in more depth. The package is made available as open source for anyone interested in amateur astronomy. Keep in mind that Julia already has a number of astronomy packages (many of them under the JuliaAstro organization) that might be more fit for serious use.","category":"page"},{"location":"#Library-Outline","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"angles.md\", \"coordinate_systems.md\", \"data.md\", \"plotting.md\", \"time.md\"]","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#Finding-horizon-coordinates-for-a-star","page":"Home","title":"Finding horizon coordinates for a star","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Given a star's equatorial coordinates (e.g. Betelgeuse in J2000) and an observer's local date/time and position, find the object's horizon coordinates.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using CelestialCalc, Dates, TimeZones\n\njulia> eq = EquatorialCoordinates(α=Time(5,55,10),δ=Angle(7,24,24))\nEquatorialCoordinates α=05:55:10 δ=7°24'24.00''\n\njulia> datetime = ZonedDateTime(2024,1,5,20,tz\"UTC-3\")\n2024-01-05T20:00:00-03:00\n\njulia> location = LatLng(-22.9068,-43.1729)\nLatLng(-22.9068, -43.1729)\n\njulia> hz = equatorial_to_horizon(eq, datetime, location)\nHorizonCoordinates h=39°00'34.33'' Az=58°30'24.15''","category":"page"},{"location":"#Plotting-a-star-map","page":"Home","title":"Plotting a star map","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using CelestialCalc, TimeZones\n\nbrightstars = brightstars_catalog()\n\ndate = ZonedDateTime(2024,1,2,22,45,tz\"UTC-3\")\nlatlng = LatLng(-22.9068, -43.1729)\n\nplot_starmap(brightstars, date, latlng; size=(900,800))","category":"page"}]
}
